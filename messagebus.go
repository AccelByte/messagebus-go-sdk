// Copyright (c) 2019 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

package messagebus

const (
	GDPR_DeletionAccount string = "GDPR_deletionAccount"
	IAM_Ban              string = "IAM_Ban"
)

const (
	separator = "_"
)

// Message defines the structure of response or incoming message
type Message struct {
	Topic       string `json:"-"`
	Message     []byte `json:"params"`
	MessageType string `json:"type"`
	Service     string `json:"service"`
	TraceId     string `json:"traceId"`
	MessageId   string `json:"id"`
}

// PublishBuilder defines the structure of message which is sent through message broker
type PublishBuilder struct {
	topic       string
	message     []byte
	messageType string
	service     string
	traceId     string
	messageId   string
	callback    func(message *Message, err error)
}

// NewPublish create new PublishBuilder instance
func NewPublish() *PublishBuilder {
	return &PublishBuilder{}
}

// Topic is a channel name
func (p *PublishBuilder) Topic(topic string) *PublishBuilder {
	p.topic = topic
	return p
}

// MessageType is a type of published message
func (p *PublishBuilder) MessageType(messageType string) *PublishBuilder {
	p.messageType = messageType
	return p
}

// Message actual message that will be published
func (p *PublishBuilder) Message(message []byte) *PublishBuilder {
	p.message = message
	return p
}

// Service is a message producer name
func (p *PublishBuilder) Service(service string) *PublishBuilder {
	p.service = service
	return p
}

// TraceID ID that generated by first message producer
func (p *PublishBuilder) TraceID(traceId string) *PublishBuilder {
	p.traceId = traceId
	return p
}

// MessageID ID that generated by message producer
func (p *PublishBuilder) MessageID(messageId string) *PublishBuilder {
	p.messageId = messageId
	return p
}

// Callback to do when the message received (used for publish with response only)
func (p *PublishBuilder) Callback(callback func(message *Message, err error)) *PublishBuilder {
	p.callback = callback
	return p
}

// SubscribeBuilder defines the structure of message which is sent through message broker
type SubscribeBuilder struct {
	topic       string
	callback    func(message *Message, err error)
	messageType string
}

// NewSubscribe create new SubscribeBuilder instance
func NewSubscribe() *SubscribeBuilder {
	return &SubscribeBuilder{}
}

// Topic is a channel name
func (s *SubscribeBuilder) Topic(topic string) *SubscribeBuilder {
	s.topic = topic
	return s
}

// MessageType is a type of published message
func (s *SubscribeBuilder) MessageType(messageType string) *SubscribeBuilder {
	s.messageType = messageType
	return s
}

// Callback to do when the message received
func (s *SubscribeBuilder) Callback(callback func(message *Message, err error)) *SubscribeBuilder {
	s.callback = callback
	return s
}

// Client is an interface for message broker functionality
type Client interface {
	// SetTimeout set listening timeout for publish with response
	SetTimeout(timeout int)

	// PublishAsync push a message to message broker topic asynchronously
	PublishAsync(publishBuilder *PublishBuilder)

	// PublishSync push a message to message broker topic synchronously
	PublishSync(publishBuilder *PublishBuilder) error

	// PublishWithResponses push a message to message broker topic synchronously and waiting response consumer until timeout
	// intended for Point to Point communication
	PublishWithResponses(publishBuilder *PublishBuilder)

	// Register add subscriber for a topic and register callback function
	Register(subscribeBuilder *SubscribeBuilder)
}
